<!DOCTYPE html>
<html>

<head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
        <%/* <meta name="robots" content="noindex"> */%>


            <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

            <!--STYLES-->
            <link rel="stylesheet" href="/styles/importer.css">
            <link rel="stylesheet" href="/styles/style.css">
            <!--STYLES END-->

            <!-- 使用Bulma，添加Bulma CSS框架 -->
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
</head>

<body>
    <section class="section">

        <!-- 导航栏 -->
        <nav class="navbar" role="navigation" aria-label="main navigation">
            <div class="navbar-brand">
                <a class="navbar-item" href="https://bulma.io">
                    <img src="https://bulma.io/images/bulma-logo.png" width="112" height="28">
                </a>

                <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="navbarBasicExample" class="navbar-menu">
                <div class="navbar-start">
                  <a class="navbar-item" href="/coupon/list">
                    Home
                  </a>
          
                  <a class="navbar-item" href="/coupon/aginate">
                    Search
                  </a>
          
          
                  <a class="navbar-item" href="/coupon/create" id="Create">
                    Create
                  </a>
                  <a class="navbar-item" href="/coupon/admin" id="Admin">
                    Admin
                  </a>
                  <a class="navbar-item" id="MyRedeemedCoupons">
          
                  </a>
                  <div class="navbar-dropdown"></div>
          
          
                  <hr class="navbar-divider">
          
                </div>
              </div>
              </div>
          
              <div class="navbar-end">
                <div class="navbar-item" id="reset">
                  <div class="buttons">
                    <a class="button is-primary" id="Signup">
                      <strong>Sign up</strong>
                    </a>
                    <a class="button is-light" href="/user/login" id="Login">
                      Log in
                    </a>
                    <!-- <a class="button is-light" href="user/logout" id="Logout" onclick="logout()">
                      Log out
                    </a> -->
                  </div>
                </div>
              </div>
              </div>
            </nav>
            <section class="section">
              <div class="container columns is-mobile">
                <div class="column ">
                  <div class="columns">
                    <div class="column is-half">
                      <div style="font-size: 40px;font-family: sans-serif;"><strong>Q-Pon</strong></div>
                      <div style="font-size: 20px;font-family: sans-serif;">Redeem your coins for dining coupons.</div>
                    </div>
                    <div class="column">
          
                    </div>
                  </div>
                  <%- body %>
          
                </div>
              </div>
            </section>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/js/jquery.min.js"></script>
    <script src="/js/three.min.js"></script>
    <!--SCRIPTS END-->


    <!-- 在网页种使用fontawesome字体 -->
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>


</body>

</html>

<script>
    async function setNew() {
      var req = new Request("/getSession", { method: "GET", })
      await fetch(req).then(function (response) {
        return response.json();
      }).then(function (json) {
        session = json.session;
        console.log(session);
        console.log(session.username);
        return session;
      })
      if (session.role) {
        if (session.role == 'admin') {
          MyRedeemedCoupons.style.display = "none";
          var reset = document.getElementById("reset");
          console.log(reset);
          var dynamicCode = '<p class="control">' + 'Hi, ' + session.username + '</p>';
          dynamicCode += '<p class="control" id="LogOut"><a class="button is-light href="user/logout" onclick="logout()"><span>Logout</span></a></p>';
          reset.innerHTML = dynamicCode;
        }
        else if (session.role == 'member') {
          Create.style.display = "none";
          Admin.style.display = "none";
          var reset = document.getElementById("reset");
          var dynamicCode = '<p class="control">' + 'Hi, ' + session.username + '</p>';
          dynamicCode += '<p class="control" id="LogOut"><a class="button is-light href="user/logout" onclick="logout()"><span>Logout</span></a></p>';
          MyRedeemedCoupons.innerHTML = '<a class="navbar-item" href="/user/' + parseInt(session.userid) + '/clients"> My Redeemed Coupons </a>';
          reset.innerHTML = dynamicCode;
        }
        else {
          Create.style.display = "none";
          Admin.style.display = "none";
          MyRedeemedCoupons.style.display = "none";
        }
      }
  
    }
    async function logout() {
      var r = confirm("Confirm Logout?");
  
      if (r) {
        var response = await fetch("/person/logout", {
          method: "POST"
        });
  
        if (response.ok) {
          // var html = await response.text();
          // alert(html);
          alert("logout.");
          location.assign("/");
        } else {
          alert(response.status + ": " + response.statusText);
        }
  
      }
    }
     setNew()
  
  </script>